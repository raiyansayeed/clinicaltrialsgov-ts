// This file is auto-generated by @hey-api/openapi-ts

export type FieldNode = {
    altPieceNames?: Array<string>;
    children?: Array<FieldNode>;
    dedLink?: WebLink;
    description?: string;
    historicOnly?: boolean;
    indexedOnly?: boolean;
    isEnum?: boolean;
    maxChars?: number;
    name: string;
    nested?: boolean;
    piece: string;
    rules?: string;
    sourceType: string;
    synonyms?: boolean;
    title?: string;
    type: string;
};

export type WebLink = {
    label: string;
    url: string;
};

export type FieldNodeList = Array<FieldNode>;

export type SearchDocument = {
    areas: Array<SearchArea>;
    name: string;
};

export type SearchArea = {
    name: string;
    param?: string;
    parts: Array<SearchPart>;
    uiLabel?: string;
};

export type SearchPart = {
    isEnum: boolean;
    isSynonyms: boolean;
    pieces: Array<string>;
    type: string;
    weight: number;
};

export type SearchDocumentList = Array<SearchDocument>;

export type EnumInfo = {
    pieces: Array<string>;
    type: string;
    values: Array<EnumItem>;
};

export type EnumItem = {
    exceptions?: {
        [key: string]: unknown;
    };
    legacyValue: string;
    value: string;
};

export type EnumInfoList = Array<EnumInfo>;

export type GzipStats = {
    averageSizeBytes: number;
    largestStudies: Array<StudySize>;
    percentiles: {
        [key: string]: unknown;
    };
    ranges: Array<DistItem>;
    totalStudies: number;
};

export type StudySize = {
    id: string;
    sizeBytes: number;
};

export type DistItem = {
    sizeRange: string;
    studiesCount: number;
};

export type ListSizes = {
    field: string;
    maxSize?: number;
    minSize?: number;
    piece: string;
    topSizes?: Array<ListSize>;
    uniqueSizesCount: number;
};

export type ListSize = {
    size: number;
    studiesCount: number;
};

export type ListSizesList = Array<ListSizes>;

export type EnumStats = {
    field: string;
    missingStudiesCount: number;
    piece: string;
    topValues?: Array<ValueCount>;
    type: FieldStatsType;
    uniqueValuesCount: number;
};

export type ValueCount = {
    studiesCount: number;
    value: string;
};

export type FieldStatsType = 'ENUM' | 'STRING' | 'DATE' | 'INTEGER' | 'NUMBER' | 'BOOLEAN';

export type StringStats = {
    field: string;
    longest?: LongestString;
    missingStudiesCount: number;
    piece: string;
    topValues?: Array<ValueCount>;
    type: FieldStatsType;
    uniqueValuesCount: number;
};

export type LongestString = {
    length: number;
    nctId: string;
    value: string;
};

export type DateStats = {
    field: string;
    formats: Array<string>;
    max?: string;
    min?: string;
    missingStudiesCount: number;
    piece: string;
    type: FieldStatsType;
};

export type IntegerStats = {
    avg?: number;
    field: string;
    max?: number;
    min?: number;
    missingStudiesCount: number;
    piece: string;
    type: FieldStatsType;
};

export type NumberStats = {
    avg?: number;
    field: string;
    max?: number;
    min?: number;
    missingStudiesCount: number;
    piece: string;
    type: FieldStatsType;
};

export type BooleanStats = {
    falseCount: number;
    field: string;
    missingStudiesCount: number;
    piece: string;
    trueCount: number;
    type: FieldStatsType;
};

export type Version = {
    apiVersion: string;
    dataTimestamp?: string;
};

export type PagedStudies = {
    nextPageToken?: string;
    studies: StudyList;
    totalCount?: number;
};

export type Study = {
    protocolSection?: ProtocolSection;
    resultsSection?: ResultsSection;
    annotationSection?: AnnotationSection;
    documentSection?: DocumentSection;
    derivedSection?: DerivedSection;
    hasResults?: boolean;
};

export type ProtocolSection = {
    identificationModule?: IdentificationModule;
    statusModule?: StatusModule;
    sponsorCollaboratorsModule?: SponsorCollaboratorsModule;
    oversightModule?: OversightModule;
    descriptionModule?: DescriptionModule;
    conditionsModule?: ConditionsModule;
    designModule?: DesignModule;
    armsInterventionsModule?: ArmsInterventionsModule;
    outcomesModule?: OutcomesModule;
    eligibilityModule?: EligibilityModule;
    contactsLocationsModule?: ContactsLocationsModule;
    referencesModule?: ReferencesModule;
    ipdSharingStatementModule?: IpdSharingStatementModule;
};

export type ResultsSection = {
    participantFlowModule?: ParticipantFlowModule;
    baselineCharacteristicsModule?: BaselineCharacteristicsModule;
    outcomeMeasuresModule?: OutcomeMeasuresModule;
    adverseEventsModule?: AdverseEventsModule;
    moreInfoModule?: MoreInfoModule;
};

export type AnnotationSection = {
    annotationModule?: AnnotationModule;
};

export type DocumentSection = {
    largeDocumentModule?: LargeDocumentModule;
};

export type DerivedSection = {
    miscInfoModule?: MiscInfoModule;
    conditionBrowseModule?: BrowseModule;
    interventionBrowseModule?: BrowseModule;
};

export type IdentificationModule = {
    nctId?: string;
    nctIdAliases?: Array<string>;
    orgStudyIdInfo?: OrgStudyIdInfo;
    secondaryIdInfos?: Array<SecondaryIdInfo>;
    briefTitle?: string;
    officialTitle?: string;
    acronym?: string;
    organization?: Organization;
};

export type StatusModule = {
    statusVerifiedDate?: PartialDate;
    overallStatus?: Status;
    lastKnownStatus?: Status;
    delayedPosting?: boolean;
    whyStopped?: string;
    expandedAccessInfo?: ExpandedAccessInfo;
    startDateStruct?: PartialDateStruct;
    primaryCompletionDateStruct?: PartialDateStruct;
    completionDateStruct?: PartialDateStruct;
    studyFirstSubmitDate?: string;
    studyFirstSubmitQcDate?: string;
    studyFirstPostDateStruct?: DateStruct;
    resultsWaived?: boolean;
    resultsFirstSubmitDate?: string;
    resultsFirstSubmitQcDate?: string;
    resultsFirstPostDateStruct?: DateStruct;
    dispFirstSubmitDate?: string;
    dispFirstSubmitQcDate?: string;
    dispFirstPostDateStruct?: DateStruct;
    lastUpdateSubmitDate?: string;
    lastUpdatePostDateStruct?: DateStruct;
};

export type SponsorCollaboratorsModule = {
    responsibleParty?: ResponsibleParty;
    leadSponsor?: Sponsor;
    collaborators?: Array<Sponsor>;
};

export type OversightModule = {
    oversightHasDmc?: boolean;
    isFdaRegulatedDrug?: boolean;
    isFdaRegulatedDevice?: boolean;
    isUnapprovedDevice?: boolean;
    isPpsd?: boolean;
    isUsExport?: boolean;
    fdaaa801Violation?: boolean;
};

export type DescriptionModule = {
    briefSummary?: string;
    detailedDescription?: string;
};

export type ConditionsModule = {
    conditions?: Array<string>;
    keywords?: Array<string>;
};

export type DesignModule = {
    studyType?: StudyType;
    nPtrsToThisExpAccNctId?: number;
    expandedAccessTypes?: ExpandedAccessTypes;
    patientRegistry?: boolean;
    targetDuration?: string;
    phases?: Array<Phase>;
    designInfo?: DesignInfo;
    bioSpec?: BioSpec;
    enrollmentInfo?: EnrollmentInfo;
};

export type ArmsInterventionsModule = {
    armGroups?: Array<ArmGroup>;
    interventions?: Array<Intervention>;
};

export type OutcomesModule = {
    primaryOutcomes?: Array<Outcome>;
    secondaryOutcomes?: Array<Outcome>;
    otherOutcomes?: Array<Outcome>;
};

export type EligibilityModule = {
    eligibilityCriteria?: string;
    healthyVolunteers?: boolean;
    sex?: Sex;
    genderBased?: boolean;
    genderDescription?: string;
    minimumAge?: string;
    maximumAge?: string;
    stdAges?: Array<StandardAge>;
    studyPopulation?: string;
    samplingMethod?: SamplingMethod;
};

export type ContactsLocationsModule = {
    centralContacts?: Array<Contact>;
    overallOfficials?: Array<Official>;
    locations?: Array<Location>;
};

export type ReferencesModule = {
    references?: Array<Reference>;
    seeAlsoLinks?: Array<SeeAlsoLink>;
    availIpds?: Array<AvailIpd>;
};

export type OutcomeMeasuresModule = {
    outcomeMeasures?: Array<OutcomeMeasure>;
};

export type MoreInfoModule = {
    limitationsAndCaveats?: LimitationsAndCaveats;
    certainAgreement?: CertainAgreement;
    pointOfContact?: PointOfContact;
};

export type AnnotationModule = {
    unpostedAnnotation?: UnpostedAnnotation;
    violationAnnotation?: ViolationAnnotation;
};

export type MiscInfoModule = {
    versionHolder?: string;
    removedCountries?: Array<string>;
    submissionTracking?: SubmissionTracking;
};

export type UnpostedAnnotation = {
    unpostedResponsibleParty?: string;
    unpostedEvents?: Array<UnpostedEvent>;
};

export type ViolationAnnotation = {
    violationEvents?: Array<ViolationEvent>;
};

export type SubmissionTracking = {
    estimatedResultsFirstSubmitDate?: string;
    firstMcpInfo?: FirstMcpInfo;
    submissionInfos?: Array<SubmissionInfo>;
};

export type ModelPredictions = {
    [key: string]: unknown;
};

export type BmiLimits = {
    [key: string]: unknown;
};

export type EnrollmentInfo = {
    count?: number;
    type?: EnrollmentType;
};

export type BioSpec = {
    retention?: BioSpecRetention;
    description?: string;
};

export type SeeAlsoLink = {
    label?: string;
    url?: string;
};

export type FirstMcpInfo = {
    postDateStruct?: DateStruct;
};

export type ExpandedAccessTypes = {
    individual?: boolean;
    intermediate?: boolean;
    treatment?: boolean;
};

export type Intervention = {
    type?: InterventionType;
    name?: string;
    description?: string;
    armGroupLabels?: Array<string>;
    otherNames?: Array<string>;
};

export type SecondaryIdInfo = {
    id?: string;
    type?: SecondaryIdType;
    domain?: string;
    link?: string;
};

export type AvailIpd = {
    id?: string;
    type?: string;
    url?: string;
    comment?: string;
};

export type LimitationsAndCaveats = {
    description?: string;
};

export type DateStruct = {
    date?: string;
    type?: DateType;
};

export type SubmissionInfo = {
    releaseDate?: string;
    unreleaseDate?: string;
    unreleaseDateUnknown?: boolean;
    resetDate?: string;
    mcpReleaseN?: number;
};

export type ExpandedAccessInfo = {
    hasExpandedAccess?: boolean;
    nctId?: string;
    statusForNctId?: ExpandedAccessStatus;
};

export type AdverseEventsModule = {
    frequencyThreshold?: string;
    timeFrame?: string;
    description?: string;
    allCauseMortalityComment?: string;
    eventGroups?: Array<EventGroup>;
    seriousEvents?: Array<AdverseEvent>;
    otherEvents?: Array<AdverseEvent>;
};

export type ViolationEvent = {
    type?: ViolationEventType;
    description?: string;
    creationDate?: string;
    issuedDate?: string;
    releaseDate?: string;
    postedDate?: string;
};

export type ArmGroup = {
    label?: string;
    type?: ArmGroupType;
    description?: string;
    interventionNames?: Array<string>;
};

export type DesignInfo = {
    allocation?: DesignAllocation;
    interventionModel?: InterventionalAssignment;
    interventionModelDescription?: string;
    primaryPurpose?: PrimaryPurpose;
    observationalModel?: ObservationalModel;
    timePerspective?: DesignTimePerspective;
    maskingInfo?: MaskingBlock;
};

export type Organization = {
    fullName?: string;
    class?: AgencyClass;
};

export type PointOfContact = {
    title?: string;
    organization?: string;
    email?: string;
    phone?: string;
    phoneExt?: string;
};

export type IpdSharingStatementModule = {
    ipdSharing?: IpdSharing;
    description?: string;
    infoTypes?: Array<IpdSharingInfoType>;
    timeFrame?: string;
    accessCriteria?: string;
    url?: string;
};

export type OrgStudyIdInfo = {
    id?: string;
    type?: OrgStudyIdType;
    link?: string;
};

export type ResponsibleParty = {
    type?: ResponsiblePartyType;
    investigatorFullName?: string;
    investigatorTitle?: string;
    investigatorAffiliation?: string;
    oldNameTitle?: string;
    oldOrganization?: string;
};

export type CertainAgreement = {
    piSponsorEmployee?: boolean;
    restrictionType?: AgreementRestrictionType;
    restrictiveAgreement?: boolean;
    otherDetails?: string;
};

export type UnpostedEvent = {
    type?: UnpostedEventType;
    date?: string;
    dateUnknown?: boolean;
};

export type Contact = {
    name?: string;
    role?: ContactRole;
    phone?: string;
    phoneExt?: string;
    email?: string;
};

export type PartialDateStruct = {
    date?: PartialDate;
    type?: DateType;
};

export type Outcome = {
    measure?: string;
    description?: string;
    timeFrame?: string;
};

export type OutcomeMeasure = {
    type?: OutcomeMeasureType;
    title?: string;
    description?: string;
    populationDescription?: string;
    reportingStatus?: ReportingStatus;
    anticipatedPostingDate?: PartialDate;
    paramType?: MeasureParam;
    dispersionType?: string;
    unitOfMeasure?: string;
    calculatePct?: boolean;
    timeFrame?: string;
    typeUnitsAnalyzed?: string;
    denomUnitsSelected?: string;
    groups?: Array<MeasureGroup>;
    denoms?: Array<Denom>;
    classes?: Array<MeasureClass>;
    analyses?: Array<MeasureAnalysis>;
};

export type BaselineCharacteristicsModule = {
    populationDescription?: string;
    typeUnitsAnalyzed?: string;
    groups?: Array<MeasureGroup>;
    denoms?: Array<Denom>;
    measures?: Array<BaselineMeasure>;
};

export type Reference = {
    pmid?: string;
    type?: ReferenceType;
    citation?: string;
    retractions?: Array<Retraction>;
};

export type ParticipantFlowModule = {
    preAssignmentDetails?: string;
    recruitmentDetails?: string;
    typeUnitsAnalyzed?: string;
    groups?: Array<FlowGroup>;
    periods?: Array<FlowPeriod>;
};

export type LargeDocumentModule = {
    noSap?: boolean;
    largeDocs?: Array<LargeDoc>;
};

export type Location = {
    facility?: string;
    status?: RecruitmentStatus;
    city?: string;
    state?: string;
    zip?: string;
    country?: string;
    contacts?: Array<Contact>;
    countryCode?: string;
    geoPoint?: GeoPoint;
};

export type Sponsor = {
    name?: string;
    class?: AgencyClass;
};

export type BrowseModule = {
    meshes?: Array<Mesh>;
    ancestors?: Array<Mesh>;
    browseLeaves?: Array<BrowseLeaf>;
    browseBranches?: Array<BrowseBranch>;
};

export type Official = {
    name?: string;
    affiliation?: string;
    role?: OfficialRole;
};

export type BrowseLeaf = {
    id?: string;
    name?: string;
    asFound?: string;
    relevance?: BrowseLeafRelevance;
};

export type MaskingBlock = {
    masking?: DesignMasking;
    maskingDescription?: string;
    whoMasked?: Array<WhoMasked>;
};

export type EventGroup = {
    id?: string;
    title?: string;
    description?: string;
    deathsNumAffected?: number;
    deathsNumAtRisk?: number;
    seriousNumAffected?: number;
    seriousNumAtRisk?: number;
    otherNumAffected?: number;
    otherNumAtRisk?: number;
};

export type Mesh = {
    id?: string;
    term?: string;
};

export type FlowGroup = {
    id?: string;
    title?: string;
    description?: string;
};

export type MeasureAnalysis = {
    paramType?: string;
    paramValue?: string;
    dispersionType?: AnalysisDispersionType;
    dispersionValue?: string;
    statisticalMethod?: string;
    statisticalComment?: string;
    pValue?: string;
    pValueComment?: string;
    ciNumSides?: ConfidenceIntervalNumSides;
    ciPctValue?: string;
    ciLowerLimit?: string;
    ciUpperLimit?: string;
    ciLowerLimitComment?: string;
    ciUpperLimitComment?: string;
    estimateComment?: string;
    testedNonInferiority?: boolean;
    nonInferiorityType?: NonInferiorityType;
    nonInferiorityComment?: string;
    otherAnalysisDescription?: string;
    groupDescription?: string;
    groupIds?: Array<string>;
};

export type AdverseEvent = {
    term?: string;
    organSystem?: string;
    sourceVocabulary?: string;
    assessmentType?: EventAssessment;
    notes?: string;
    stats?: Array<EventStats>;
};

export type Retraction = {
    pmid?: string;
    source?: string;
};

export type Denom = {
    units?: string;
    counts?: Array<DenomCount>;
};

export type FlowPeriod = {
    title?: string;
    milestones?: Array<FlowMilestone>;
    dropWithdraws?: Array<DropWithdraw>;
};

export type MeasureGroup = {
    id?: string;
    title?: string;
    description?: string;
};

export type MeasureClass = {
    title?: string;
    denoms?: Array<Denom>;
    categories?: Array<MeasureCategory>;
};

export type BrowseBranch = {
    abbrev?: string;
    name?: string;
};

export type BaselineMeasure = {
    title?: string;
    description?: string;
    populationDescription?: string;
    paramType?: MeasureParam;
    dispersionType?: MeasureDispersionType;
    unitOfMeasure?: string;
    calculatePct?: boolean;
    denomUnitsSelected?: string;
    denoms?: Array<Denom>;
    classes?: Array<MeasureClass>;
};

export type LargeDoc = {
    typeAbbrev?: string;
    hasProtocol?: boolean;
    hasSap?: boolean;
    hasIcf?: boolean;
    label?: string;
    date?: string;
    uploadDate?: DateTimeMinutes;
    filename?: string;
    size?: number;
};

export type DropWithdraw = {
    type?: string;
    comment?: string;
    reasons?: Array<FlowStats>;
};

export type DenomCount = {
    groupId?: string;
    value?: string;
};

export type EventStats = {
    groupId?: string;
    numEvents?: number;
    numAffected?: number;
    numAtRisk?: number;
};

export type MeasureCategory = {
    title?: string;
    measurements?: Array<Measurement>;
};

export type FlowMilestone = {
    type?: string;
    comment?: string;
    achievements?: Array<FlowStats>;
};

export type FlowStats = {
    groupId?: string;
    comment?: string;
    numSubjects?: string;
    numUnits?: string;
};

export type Measurement = {
    groupId?: string;
    value?: string;
    spread?: string;
    lowerLimit?: string;
    upperLimit?: string;
    comment?: string;
};

export type Status = 'ACTIVE_NOT_RECRUITING' | 'COMPLETED' | 'ENROLLING_BY_INVITATION' | 'NOT_YET_RECRUITING' | 'RECRUITING' | 'SUSPENDED' | 'TERMINATED' | 'WITHDRAWN' | 'AVAILABLE' | 'NO_LONGER_AVAILABLE' | 'TEMPORARILY_NOT_AVAILABLE' | 'APPROVED_FOR_MARKETING' | 'WITHHELD' | 'UNKNOWN';

export type StudyType = 'EXPANDED_ACCESS' | 'INTERVENTIONAL' | 'OBSERVATIONAL';

export type Phase = 'NA' | 'EARLY_PHASE1' | 'PHASE1' | 'PHASE2' | 'PHASE3' | 'PHASE4';

export type Sex = 'FEMALE' | 'MALE' | 'ALL';

export type StandardAge = 'CHILD' | 'ADULT' | 'OLDER_ADULT';

export type SamplingMethod = 'PROBABILITY_SAMPLE' | 'NON_PROBABILITY_SAMPLE';

export type IpdSharing = 'YES' | 'NO' | 'UNDECIDED';

export type IpdSharingInfoType = 'STUDY_PROTOCOL' | 'SAP' | 'ICF' | 'CSR' | 'ANALYTIC_CODE';

export type OrgStudyIdType = 'NIH' | 'FDA' | 'VA' | 'CDC' | 'AHRQ' | 'SAMHSA';

export type SecondaryIdType = 'NIH' | 'FDA' | 'VA' | 'CDC' | 'AHRQ' | 'SAMHSA' | 'OTHER_GRANT' | 'EUDRACT_NUMBER' | 'CTIS' | 'REGISTRY' | 'OTHER';

export type AgencyClass = 'NIH' | 'FED' | 'OTHER_GOV' | 'INDIV' | 'INDUSTRY' | 'NETWORK' | 'AMBIG' | 'OTHER' | 'UNKNOWN';

export type ExpandedAccessStatus = 'AVAILABLE' | 'NO_LONGER_AVAILABLE' | 'TEMPORARILY_NOT_AVAILABLE' | 'APPROVED_FOR_MARKETING';

export type DateType = 'ACTUAL' | 'ESTIMATED';

export type ResponsiblePartyType = 'SPONSOR' | 'PRINCIPAL_INVESTIGATOR' | 'SPONSOR_INVESTIGATOR';

export type DesignAllocation = 'RANDOMIZED' | 'NON_RANDOMIZED' | 'NA';

export type InterventionalAssignment = 'SINGLE_GROUP' | 'PARALLEL' | 'CROSSOVER' | 'FACTORIAL' | 'SEQUENTIAL';

export type PrimaryPurpose = 'TREATMENT' | 'PREVENTION' | 'DIAGNOSTIC' | 'ECT' | 'SUPPORTIVE_CARE' | 'SCREENING' | 'HEALTH_SERVICES_RESEARCH' | 'BASIC_SCIENCE' | 'DEVICE_FEASIBILITY' | 'OTHER';

export type ObservationalModel = 'COHORT' | 'CASE_CONTROL' | 'CASE_ONLY' | 'CASE_CROSSOVER' | 'ECOLOGIC_OR_COMMUNITY' | 'FAMILY_BASED' | 'DEFINED_POPULATION' | 'NATURAL_HISTORY' | 'OTHER';

export type DesignTimePerspective = 'RETROSPECTIVE' | 'PROSPECTIVE' | 'CROSS_SECTIONAL' | 'OTHER';

export type BioSpecRetention = 'NONE_RETAINED' | 'SAMPLES_WITH_DNA' | 'SAMPLES_WITHOUT_DNA';

export type EnrollmentType = 'ACTUAL' | 'ESTIMATED';

export type ArmGroupType = 'EXPERIMENTAL' | 'ACTIVE_COMPARATOR' | 'PLACEBO_COMPARATOR' | 'SHAM_COMPARATOR' | 'NO_INTERVENTION' | 'OTHER';

export type InterventionType = 'BEHAVIORAL' | 'BIOLOGICAL' | 'COMBINATION_PRODUCT' | 'DEVICE' | 'DIAGNOSTIC_TEST' | 'DIETARY_SUPPLEMENT' | 'DRUG' | 'GENETIC' | 'PROCEDURE' | 'RADIATION' | 'OTHER';

export type ContactRole = 'STUDY_CHAIR' | 'STUDY_DIRECTOR' | 'PRINCIPAL_INVESTIGATOR' | 'SUB_INVESTIGATOR' | 'CONTACT';

export type OfficialRole = 'STUDY_CHAIR' | 'STUDY_DIRECTOR' | 'PRINCIPAL_INVESTIGATOR' | 'SUB_INVESTIGATOR';

export type RecruitmentStatus = 'ACTIVE_NOT_RECRUITING' | 'COMPLETED' | 'ENROLLING_BY_INVITATION' | 'NOT_YET_RECRUITING' | 'RECRUITING' | 'SUSPENDED' | 'TERMINATED' | 'WITHDRAWN' | 'AVAILABLE';

export type ReferenceType = 'BACKGROUND' | 'RESULT' | 'DERIVED';

export type MeasureParam = 'GEOMETRIC_MEAN' | 'GEOMETRIC_LEAST_SQUARES_MEAN' | 'LEAST_SQUARES_MEAN' | 'LOG_MEAN' | 'MEAN' | 'MEDIAN' | 'NUMBER' | 'COUNT_OF_PARTICIPANTS' | 'COUNT_OF_UNITS';

export type MeasureDispersionType = 'NA' | 'STANDARD_DEVIATION' | 'STANDARD_ERROR' | 'INTER_QUARTILE_RANGE' | 'FULL_RANGE' | 'CONFIDENCE_80' | 'CONFIDENCE_90' | 'CONFIDENCE_95' | 'CONFIDENCE_975' | 'CONFIDENCE_99' | 'CONFIDENCE_OTHER' | 'GEOMETRIC_COEFFICIENT';

export type OutcomeMeasureType = 'PRIMARY' | 'SECONDARY' | 'OTHER_PRE_SPECIFIED' | 'POST_HOC';

export type ReportingStatus = 'NOT_POSTED' | 'POSTED';

export type EventAssessment = 'NON_SYSTEMATIC_ASSESSMENT' | 'SYSTEMATIC_ASSESSMENT';

export type AgreementRestrictionType = 'LTE60' | 'GT60' | 'OTHER';

export type BrowseLeafRelevance = 'LOW' | 'HIGH';

export type DesignMasking = 'NONE' | 'SINGLE' | 'DOUBLE' | 'TRIPLE' | 'QUADRUPLE';

export type WhoMasked = 'PARTICIPANT' | 'CARE_PROVIDER' | 'INVESTIGATOR' | 'OUTCOMES_ASSESSOR';

export type AnalysisDispersionType = 'STANDARD_DEVIATION' | 'STANDARD_ERROR_OF_MEAN';

export type ConfidenceIntervalNumSides = 'ONE_SIDED' | 'TWO_SIDED';

export type NonInferiorityType = 'SUPERIORITY' | 'NON_INFERIORITY' | 'EQUIVALENCE' | 'OTHER' | 'NON_INFERIORITY_OR_EQUIVALENCE' | 'SUPERIORITY_OR_OTHER' | 'NON_INFERIORITY_OR_EQUIVALENCE_LEGACY' | 'SUPERIORITY_OR_OTHER_LEGACY';

export type UnpostedEventType = 'RESET' | 'RELEASE' | 'UNRELEASE';

export type ViolationEventType = 'VIOLATION_IDENTIFIED' | 'CORRECTION_CONFIRMED' | 'PENALTY_IMPOSED' | 'ISSUES_IN_LETTER_ADDRESSED_CONFIRMED';

export type GeoPoint = {
    lat: number;
    lon: number;
};

export type FieldValuesStatsList = Array<FieldValuesStats>;

export type FieldValuesStats = EnumStats | StringStats | DateStats | IntegerStats | NumberStats | BooleanStats;

/**
 * Array of studies
 * `study` field values of type `markup` are in markdown format.
 *
 */
export type StudyList = Array<Study>;

/**
 * Study objects in csv file
 */
export type StudiesCsv = string;

/**
 * Study objects as files in zip archive
 */
export type StudiesZip = string;

/**
 * Study in FHIR JSON format
 */
export type StudyFhir = {
    [key: string]: unknown;
};

/**
 * Date in `yyyy`, `yyyy-MM`, or `yyyy-MM-dd` format
 */
export type PartialDate = string;

/**
 * Date and time in `yyyy-MM-dd'T'HH:mm` format
 */
export type DateTimeMinutes = string;

/**
 * A text message describing an error
 */
export type ErrorMessage = string;

export type ListStudiesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Must be one of the following:
         * * `csv`- return CSV table with one page of study data; first page will contain header with column names; available fields are listed on [CSV Download](/data-api/about-api/csv-download) page
         * * `json`- return JSON with one page of study data; every study object is placed in a separate line; `markup` type fields format depends on `markupFormat` parameter
         */
        format?: 'csv' | 'json';
        /**
         * Format of `markup` type fields:
         * * `markdown`- [markdown](https://spec.commonmark.org/0.28/) format
         * * `legacy`- compatible with classic PRS
         *
         * Applicable only to `json` format.
         */
        markupFormat?: 'markdown' | 'legacy';
        /**
         * "Conditions or disease" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries). See "ConditionSearch Area" on [Search Areas](/data-api/about-api/search-areas#ConditionSearch) for more details.
         */
        'query.cond'?: string;
        /**
         * "Other terms" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries). See "BasicSearch Area" on [Search Areas](/data-api/about-api/search-areas#BasicSearch) for more details.
         */
        'query.term'?: string;
        /**
         * "Location terms" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries). See "LocationSearch Area" on [Search Areas](/data-api/about-api/search-areas#LocationSearch) for more details.
         */
        'query.locn'?: string;
        /**
         * "Title / acronym" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries). See "TitleSearch Area" on [Search Areas](/data-api/about-api/search-areas#TitleSearch) for more details.
         */
        'query.titles'?: string;
        /**
         * "Intervention / treatment" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries). See "InterventionSearch Area" on [Search Areas](/data-api/about-api/search-areas#InterventionSearch) for more details.
         */
        'query.intr'?: string;
        /**
         * "Outcome measure" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries). See "OutcomeSearch Area" on [Search Areas](/data-api/about-api/search-areas#OutcomeSearch) for more details.
         */
        'query.outc'?: string;
        /**
         * "Sponsor / collaborator" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries). See "SponsorSearch Area" on [Search Areas](/data-api/about-api/search-areas#SponsorSearch) for more details.
         */
        'query.spons'?: string;
        /**
         * Searches in "LeadSponsorName" field. See [Study Data Structure](/data-api/about-api/study-data-structure#LeadSponsorName) for more details. The query is in [Essie expression syntax](/find-studies/constructing-complex-search-queries).
         */
        'query.lead'?: string;
        /**
         * "Study IDs" query in [Essie expression syntax](/find-studies/constructing-complex-search-queries). See "IdSearch Area" on [Search Areas](/data-api/about-api/search-areas#IdSearch) for more details.
         */
        'query.id'?: string;
        /**
         * See "PatientSearch Area" on [Search Areas](/data-api/about-api/search-areas#PatientSearch) for more details.
         */
        'query.patient'?: string;
        /**
         * Filter by comma- or pipe-separated list of statuses
         */
        'filter.overallStatus'?: Array<Status>;
        /**
         * Filter by geo-function. Currently only distance function is supported.
         * Format: `distance(latitude,longitude,distance)`
         */
        'filter.geo'?: string;
        /**
         * Filter by comma- or pipe-separated list of NCT IDs (a.k.a. ClinicalTrials.gov identifiers).
         * The provided IDs will be searched in [NCTId](data-api/about-api/study-data-structure#NCTId) and
         * [NCTIdAlias](data-api/about-api/study-data-structure#NCTIdAlias) fields.
         */
        'filter.ids'?: Array<string>;
        /**
         * Filter by query in [Essie expression syntax](/find-studies/constructing-complex-search-queries)
         */
        'filter.advanced'?: string;
        /**
         * Filter by comma- or pipe-separated list of `area`:`synonym_id` pairs
         */
        'filter.synonyms'?: Array<string>;
        /**
         * Filter by comma- or pipe-separated list of statuses
         */
        'postFilter.overallStatus'?: Array<Status>;
        /**
         * Filter by geo-function. Currently only distance function is supported.
         * Format: `distance(latitude,longitude,distance)`
         */
        'postFilter.geo'?: string;
        /**
         * Filter by comma- or pipe-separated list of NCT IDs (a.k.a. ClinicalTrials.gov identifiers).
         * The provided IDs will be searched in [NCTId](data-api/about-api/study-data-structure#NCTId) and
         * [NCTIdAlias](data-api/about-api/study-data-structure#NCTIdAlias) fields.
         */
        'postFilter.ids'?: Array<string>;
        /**
         * Filter by query in [Essie expression syntax](/find-studies/constructing-complex-search-queries)
         */
        'postFilter.advanced'?: string;
        /**
         * Filter by comma- or pipe-separated list of `area`:`synonym_id` pairs
         */
        'postFilter.synonyms'?: Array<string>;
        /**
         * Apply aggregation filters, aggregation counts will not be provided.
         * The value is comma- or pipe-separated list of pairs `filter_id`:`space-separated list of option keys` for the checked options.
         */
        aggFilters?: string;
        /**
         * Set proximity factor by distance from `filter.geo` location to the closest [LocationGeoPoint](/data-api/about-api/study-data-structure#LocationGeoPoint) of a study.
         * Ignored, if `filter.geo` parameter is not set or response contains more than 10,000 studies.
         */
        geoDecay?: string;
        /**
         * If specified, must be non-empty comma- or pipe-separated list of fields to return. If unspecified, all fields will be returned.
         * Order of the fields does not matter.
         *
         * For `csv` format, specify list of columns. The column names are available on [CSV Download](/data-api/about-api/csv-download).
         *
         * For `json` format, every list item is either area name, piece name, field name, or special name.
         * If a piece or a field is a branch node, all descendant fields will be included.
         * All area names are available on [Search Areas](/data-api/about-api/search-areas),
         * the piece and field names — on [Data Structure](/data-api/about-api/study-data-structure) and also can be retrieved at `/studies/metadata` endpoint.
         * There is a special name, `@query`, which expands to all fields queried by search.
         */
        fields?: Array<string>;
        /**
         * Comma- or pipe-separated list of sorting options of the studies. The returning studies are not sorted by default for a performance reason.
         * Every list item contains a field/piece name and an optional sort direction (`asc` for ascending or `desc` for descending)
         * after colon character.
         *
         * All piece and field names can be found on [Data Structure](/data-api/about-api/study-data-structure) and also can be retrieved
         * at `/studies/metadata` endpoint. Currently, only date and numeric fields are allowed for sorting.
         * There is a special "field" `@relevance` to sort by relevance to a search query.
         *
         * Studies missing sort field are always last. Default sort direction:
         * * Date field - `desc`
         * * Numeric field - `asc`
         * * `@relevance` - `desc`
         */
        sort?: Array<string>;
        /**
         * Count total number of studies in all pages and return `totalCount` field with first page, if `true`.
         * For CSV, the result can be found in `x-total-count` response header.
         * The parameter is ignored for the subsequent pages.
         */
        countTotal?: boolean;
        /**
         * Page size is maximum number of studies to return in response. It does not have to be the same for every page.
         * If not specified or set to 0, the default value will be used. It will be coerced down to  1,000, if greater than that.
         */
        pageSize?: number;
        /**
         * Token to get next page. Set it to a `nextPageToken` value returned with the previous page in JSON format.
         * For CSV, it can be found in `x-next-page-token` response header.
         * Do not specify it for first page.
         */
        pageToken?: string;
    };
    url: '/studies';
};

export type ListStudiesErrors = {
    /**
     * Bad Request
     */
    400: ErrorMessage;
};

export type ListStudiesError = ListStudiesErrors[keyof ListStudiesErrors];

export type ListStudiesResponses = {
    /**
     * OK
     */
    200: PagedStudies;
};

export type ListStudiesResponse = ListStudiesResponses[keyof ListStudiesResponses];

export type FetchStudyData = {
    body?: never;
    path: {
        /**
         * NCT Number of a study. If found in [NCTIdAlias](data-api/about-api/study-data-structure#NCTIdAlias) field,
         * 301 HTTP redirect to the actual study will be returned.
         */
        nctId: string;
    };
    query?: {
        /**
         * Must be one of the following:
         * * `csv`- return CSV table; available fields are listed on [CSV Download](/data-api/about-api/csv-download)
         * * `json`- return JSON object; format of `markup` fields depends on `markupFormat` parameter
         * * `json.zip`- put JSON object into a .json file and download it as zip archive; field values of type `markup` are in [markdown](https://spec.commonmark.org/0.28/) format
         * * `fhir.json` - return FHIR JSON; fields are not customizable; see [Access Data in FHIR](/data-api/fhir)
         * * `ris`- return RIS record; available tags are listed on [RIS Download](/data-api/about-api/ris-download)
         */
        format?: 'csv' | 'json' | 'json.zip' | 'fhir.json' | 'ris';
        /**
         * Format of `markup` type fields:
         * * `markdown`- [markdown](https://spec.commonmark.org/0.28/) format
         * * `legacy`- compatible with classic PRS
         *
         * Applicable only to `json` format.
         */
        markupFormat?: 'markdown' | 'legacy';
        /**
         * If specified, must be non-empty comma- or pipe-separated list of fields to return. If unspecified, all fields will be returned.
         * Order of the fields does not matter.
         *
         * For `csv` format, specify list of columns. The column names are available on [CSV Download](/data-api/about-api/csv-download).
         *
         * For `json` and `json.zip` formats, every list item is either area name, piece name, or field name.
         * If a piece or a field is a branch node, all descendant fields will be included.
         * All area names are available on [Search Areas](/data-api/about-api/search-areas),
         * the piece and field names - on [Data Structure](/data-api/about-api/study-data-structure) and also can be retrieved at `/studies/metadata` endpoint.
         *
         * For `fhir.json` format, all available fields are returned and this parameter must be unspecified.
         *
         * For `ris` format, specify list of tags. The tag names are available on [RIS Download](/data-api/about-api/ris-download).
         */
        fields?: Array<string>;
    };
    url: '/studies/{nctId}';
};

export type FetchStudyErrors = {
    /**
     * Bad Request
     */
    400: ErrorMessage;
    /**
     * Not Found
     */
    404: ErrorMessage;
};

export type FetchStudyError = FetchStudyErrors[keyof FetchStudyErrors];

export type FetchStudyResponses = {
    /**
     * OK
     */
    200: Study;
};

export type FetchStudyResponse = FetchStudyResponses[keyof FetchStudyResponses];

export type StudiesMetadataData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include indexed-only fields, if `true`
         */
        includeIndexedOnly?: boolean;
        /**
         * Include fields available only in historic data, if `true`
         */
        includeHistoricOnly?: boolean;
    };
    url: '/studies/metadata';
};

export type StudiesMetadataErrors = {
    /**
     * Bad Request
     */
    400: ErrorMessage;
};

export type StudiesMetadataError = StudiesMetadataErrors[keyof StudiesMetadataErrors];

export type StudiesMetadataResponses = {
    /**
     * OK
     */
    200: FieldNodeList;
};

export type StudiesMetadataResponse = StudiesMetadataResponses[keyof StudiesMetadataResponses];

export type SearchAreasData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/studies/search-areas';
};

export type SearchAreasErrors = {
    /**
     * Bad Request
     */
    400: ErrorMessage;
};

export type SearchAreasError = SearchAreasErrors[keyof SearchAreasErrors];

export type SearchAreasResponses = {
    /**
     * OK
     */
    200: SearchDocumentList;
};

export type SearchAreasResponse = SearchAreasResponses[keyof SearchAreasResponses];

export type EnumsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/studies/enums';
};

export type EnumsErrors = {
    /**
     * Bad Request
     */
    400: ErrorMessage;
};

export type EnumsError = EnumsErrors[keyof EnumsErrors];

export type EnumsResponses = {
    /**
     * OK
     */
    200: EnumInfoList;
};

export type EnumsResponse = EnumsResponses[keyof EnumsResponses];

export type SizeStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/stats/size';
};

export type SizeStatsErrors = {
    /**
     * Bad Request
     */
    400: ErrorMessage;
};

export type SizeStatsError = SizeStatsErrors[keyof SizeStatsErrors];

export type SizeStatsResponses = {
    /**
     * OK
     */
    200: GzipStats;
};

export type SizeStatsResponse = SizeStatsResponses[keyof SizeStatsResponses];

export type FieldValuesStatsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by field types
         */
        types?: Array<FieldStatsType>;
        /**
         * Filter by piece names or field paths of leaf fields.
         * See [Data Structure](/data-api/about-api/study-data-structure) for the available values.
         *
         * If specified, must be non-empty comma- or pipe-separated list of fields to return.
         */
        fields?: Array<string>;
    };
    url: '/stats/field/values';
};

export type FieldValuesStatsErrors = {
    /**
     * Bad Request
     */
    400: ErrorMessage;
    /**
     * Not Found
     */
    404: ErrorMessage;
};

export type FieldValuesStatsError = FieldValuesStatsErrors[keyof FieldValuesStatsErrors];

export type FieldValuesStatsResponses = {
    /**
     * OK
     */
    200: FieldValuesStatsList;
};

export type FieldValuesStatsResponse = FieldValuesStatsResponses[keyof FieldValuesStatsResponses];

export type ListFieldSizesStatsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by piece names or field paths of leaf fields.
         * See [Data Structure](/data-api/about-api/study-data-structure) for the available values.
         *
         * If specified, must be non-empty comma- or pipe-separated list of fields to return.
         * If unspecified, all available stats will be returned.
         */
        fields?: Array<string>;
    };
    url: '/stats/field/sizes';
};

export type ListFieldSizesStatsErrors = {
    /**
     * Bad Request
     */
    400: ErrorMessage;
    /**
     * Not Found
     */
    404: ErrorMessage;
};

export type ListFieldSizesStatsError = ListFieldSizesStatsErrors[keyof ListFieldSizesStatsErrors];

export type ListFieldSizesStatsResponses = {
    /**
     * OK
     */
    200: ListSizesList;
};

export type ListFieldSizesStatsResponse = ListFieldSizesStatsResponses[keyof ListFieldSizesStatsResponses];

export type VersionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/version';
};

export type VersionErrors = {
    /**
     * Bad Request
     */
    400: ErrorMessage;
};

export type VersionError = VersionErrors[keyof VersionErrors];

export type VersionResponses = {
    /**
     * OK
     */
    200: Version;
};

export type VersionResponse = VersionResponses[keyof VersionResponses];

export type ClientOptions = {
    baseUrl: 'https://clinicaltrials.gov/api/v2' | (string & {});
};
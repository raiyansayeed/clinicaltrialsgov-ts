// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ListStudiesData, ListStudiesResponses, ListStudiesErrors, FetchStudyData, FetchStudyResponses, FetchStudyErrors, StudiesMetadataData, StudiesMetadataResponses, StudiesMetadataErrors, SearchAreasData, SearchAreasResponses, SearchAreasErrors, EnumsData, EnumsResponses, EnumsErrors, SizeStatsData, SizeStatsResponses, SizeStatsErrors, FieldValuesStatsData, FieldValuesStatsResponses, FieldValuesStatsErrors, ListFieldSizesStatsData, ListFieldSizesStatsResponses, ListFieldSizesStatsErrors, VersionData, VersionResponses, VersionErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Studies
 * Returns data of studies matching query and filter parameters. The studies are returned page by page.
 * If response contains `nextPageToken`, use its value in `pageToken` to get next page.
 * The last page will not contain `nextPageToken`. A page may have empty `studies` array.
 * Request for each subsequent page **must** have the same parameters as for the first page, except
 * `countTotal`, `pageSize`, and `pageToken` parameters.
 *
 * If neither queries nor filters are set, all studies will be returned.
 * If any query parameter contains only NCT IDs (comma- and/or space-separated), filters are ignored.
 *
 * `query.*` parameters are in [Essie expression syntax](/find-studies/constructing-complex-search-queries).
 * Those parameters affect ranking of studies, if sorted by relevance. See `sort` parameter for details.
 *
 * `filter.*` and `postFilter.*` parameters have same effect as there is no aggregation calculation.
 * Both are available just to simplify applying parameters from search request.
 * Both do not affect ranking of studies.
 *
 * Note: When trying JSON format in your browser, do not set too large `pageSize` parameter, if `fields` is
 * unlimited. That may return too much data for the browser to parse and render.
 */
export const listStudies = <ThrowOnError extends boolean = false>(options?: Options<ListStudiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListStudiesResponses, ListStudiesErrors, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/studies',
        ...options
    });
};

/**
 * Single Study
 * Returns data of a single study.
 */
export const fetchStudy = <ThrowOnError extends boolean = false>(options: Options<FetchStudyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FetchStudyResponses, FetchStudyErrors, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/studies/{nctId}',
        ...options
    });
};

/**
 * Data Model Fields
 * Returns study data model fields.
 */
export const studiesMetadata = <ThrowOnError extends boolean = false>(options?: Options<StudiesMetadataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StudiesMetadataResponses, StudiesMetadataErrors, ThrowOnError>({
        url: '/studies/metadata',
        ...options
    });
};

/**
 * Search Areas
 * Search Docs and their Search Areas.
 */
export const searchAreas = <ThrowOnError extends boolean = false>(options?: Options<SearchAreasData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SearchAreasResponses, SearchAreasErrors, ThrowOnError>({
        url: '/studies/search-areas',
        ...options
    });
};

/**
 * Enums
 * Returns enumeration types and their values.
 *
 * Every item of the returning array represents enum type and contains the following properties:
 * * `type` - enum type name
 * * `pieces` - array of names of all data pieces having the enum type
 * * `values` - all available values of the enum; every item contains the following properties:
 * * `value` - data value
 * * `legacyValue` - data value in legacy API
 * * `exceptions` - map from data piece name to legacy value when different from `legacyValue`
 * (some data pieces had special enum values in legacy API)
 */
export const enums = <ThrowOnError extends boolean = false>(options?: Options<EnumsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EnumsResponses, EnumsErrors, ThrowOnError>({
        url: '/studies/enums',
        ...options
    });
};

/**
 * Study Sizes
 * Statistics of study JSON sizes.
 */
export const sizeStats = <ThrowOnError extends boolean = false>(options?: Options<SizeStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SizeStatsResponses, SizeStatsErrors, ThrowOnError>({
        url: '/stats/size',
        ...options
    });
};

/**
 * Field Values
 * Value statistics of the study leaf fields.
 */
export const fieldValuesStats = <ThrowOnError extends boolean = false>(options?: Options<FieldValuesStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FieldValuesStatsResponses, FieldValuesStatsErrors, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/stats/field/values',
        ...options
    });
};

/**
 * List Field Sizes
 * Sizes of list/array fields.
 *
 * To search studies by a list field size, use `AREA[FieldName:size]` search operator.
 * For example, [AREA\[Phase:size\] 2](https://clinicaltrials.gov/search?term=AREA%5BPhase:size%5D%202)
 * query finds studies with 2 phases.
 */
export const listFieldSizesStats = <ThrowOnError extends boolean = false>(options?: Options<ListFieldSizesStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFieldSizesStatsResponses, ListFieldSizesStatsErrors, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/stats/field/sizes',
        ...options
    });
};

/**
 * Version
 * API and data versions.
 *
 * API version follows [Semantic Versioning 2.0.0 Schema](https://semver.org/spec/v2.0.0.html).
 * Data version is UTC timestamp in `yyyy-MM-dd'T'HH:mm:ss` format.
 */
export const version = <ThrowOnError extends boolean = false>(options?: Options<VersionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<VersionResponses, VersionErrors, ThrowOnError>({
        url: '/version',
        ...options
    });
};